<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes</title>
    <link>https://uyenhoang.github.io/index.xml</link>
    <description>Recent content on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Feb 2017 15:06:09 -0500</lastBuildDate>
    <atom:link href="https://uyenhoang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python notes</title>
      <link>https://uyenhoang.github.io/post/python_notes/</link>
      <pubDate>Thu, 09 Feb 2017 15:06:09 -0500</pubDate>
      
      <guid>https://uyenhoang.github.io/post/python_notes/</guid>
      <description>

&lt;h1 id=&#34;modules&#34;&gt;Modules&lt;/h1&gt;

&lt;p&gt;Writing a module to reuse a number of functions in other programs. The simplest way of writing a module is to create a file with a &lt;code&gt;.py&lt;/code&gt; extension that contains functions and variables. Another method is to write the modules in the native language in which the Python interpreter was written, when compiled, they can be used from Python code when using the standard Python interpreter.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys

#To specify command line arguments to the program in IDE.
try: 
    __file__
except:
    sys.argv = [sys.argv, &#39;wordcount.py&#39;, &#39;--count&#39;, &#39;small.txt&#39;]
print(&#39;The command line arguments are:&#39;)
for i in sys.argv:
    print(i)

The command line arguments are:
[&#39;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ipykernel/__main__.py&#39;, &#39;-f&#39;]
wordcount.py
--count
small.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;byte-compiled-pyc-files&#34;&gt;Byte-compiled .pyc files&lt;/h1&gt;

&lt;p&gt;Python creates byte-compiled files with the extension &lt;code&gt;.pyc&lt;/code&gt; to make importing a module from another program faster since portion of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent.&lt;/p&gt;

&lt;h1 id=&#34;a-module-s-name-version&#34;&gt;A module&amp;rsquo;s &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if __name__ == &#39;__main__&#39;:
	print(&#39;This program is being run by itself&#39;)

else:
	print(&#39;I am being imported from another module&#39;)	

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works:&lt;/h3&gt;

&lt;p&gt;Every Python module has its &lt;code&gt;__name__&lt;/code&gt; defined. If this is &lt;code&gt;__main__&lt;/code&gt;, that implies that the module is being run standalone by the user. It&amp;rsquo;s common practice for each module to declare it&amp;rsquo;s version number using &lt;code&gt;__version__&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-dir-function&#34;&gt;The &lt;code&gt;dir&lt;/code&gt; function&lt;/h1&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python
&amp;gt;&amp;gt;&amp;gt; import sys

# get names of attributes in sys module
&amp;gt;&amp;gt;&amp;gt; dir(sys)
[&#39;__displayhook__&#39;, &#39;__doc__&#39;,
&#39;argv&#39;, &#39;builtin_module_names&#39;,
&#39;version&#39;, &#39;version_info&#39;]
# only few entries shown here

# get names of attributes for current module
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, 
&#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;sys&#39;]

# create a new variable &#39;a&#39;
&amp;gt;&amp;gt;&amp;gt; a = 5

&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;a&#39;]

# delete/remove a name
&amp;gt;&amp;gt;&amp;gt; del a

&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works-1&#34;&gt;How it works:&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; function returns a list of attributes that the specified module contains. By default, it returns the list of attributes for the current module without any arguments is passed.&lt;/p&gt;

&lt;p&gt;A note on &lt;code&gt;del&lt;/code&gt; - this statement is used to delete a variable/name and after statement has run, in this case &lt;code&gt;del a&lt;/code&gt;, completely remove &lt;code&gt;a&lt;/code&gt; from the current Python environment.&lt;/p&gt;

&lt;h1 id=&#34;data-structures&#34;&gt;Data structures&lt;/h1&gt;

&lt;p&gt;Example:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Factorization machines introduction</title>
      <link>https://uyenhoang.github.io/post/fm/</link>
      <pubDate>Tue, 24 Jan 2017 15:28:54 -0500</pubDate>
      
      <guid>https://uyenhoang.github.io/post/fm/</guid>
      <description>

&lt;p&gt;Factorization machines (FM) are a generic model class that can mimic most factorization models just by feature engineering.&lt;/p&gt;

&lt;p&gt;FMs combine feature engineering with factorization models(matrix factorization or tensor factorization) in estimating interactions between categorical variables.&lt;/p&gt;

&lt;!-- Factorization machines (FMs) uses linear regression and matrix factorization to model sparse feature interactions but in linear time.
 --&gt;

&lt;h2 id=&#34;factorization-machines-math&#34;&gt;Factorization Machines Math&lt;/h2&gt;

&lt;p&gt;$$\hat y := w_0 + \sum_{i= 1}^n w_i x_i + \sum_{i = 1}^n \sum_{j = i+1}^n \hat w_{i,j} x_i x_j$$&lt;/p&gt;

&lt;p&gt;where $\hat w_{i,j}$ are the factorized interaction parameters between pairs&lt;/p&gt;

&lt;p&gt;$$w_{i, j} = \langle \mathbf{v_i}, \mathbf{v_j}\rangle = \sum_{f = 1}^k v_{i,f} \cdot v_{j,f}$$&lt;/p&gt;

&lt;p&gt;and the model parameters $\Theta$ that have to be estimated are:
$$w_{0}, \mathbf{w} \in \mathbb{R}^n, \mathbf{V} \in \mathbb{R}^{n \times k}$$&lt;/p&gt;

&lt;p&gt;Intepretation: $w_0$ is the global bias, $w_i$ models the interaction of the i-th variable to the target and $\hat w_{i, j}$ models the factorized interaction of a pair of variables with the target.&lt;/p&gt;

&lt;p&gt;When we consider quadractic feature interactions, the complexity increases to $O(n^2)$ in the above formula. Now consider a very sparse set of features, the runtime blows up. In most cases, we instead model a very limited set of feature interactions to manage the complexity.&lt;/p&gt;

&lt;h2 id=&#34;how-do-fms-solve-the-problem&#34;&gt;How do FMs solve the problem?&lt;/h2&gt;

&lt;p&gt;In the recommendataion problem space, the sparsity problem has been dealt with a well-documented technique called (non-negative) matrix factorization&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://uyenhoang.github.io/images/factorization.png&#34; alt=&#34;Example image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We factorize sparse user item matrix $( r )$ $\in \mathbb{R}^{U \times I}$ into a user matrix $(u)$ $\in \mathbb{R}^{U  \times K}$ and an item matrix $(i)$ $\in \mathbb{R}^{I \times K}$, where $K &amp;lt;&amp;lt; U$ and $K &amp;lt;&amp;lt; I$.&lt;/p&gt;

&lt;p&gt;User $(u_i)$&amp;rsquo;s preference for item $i_j$ can be approximated by $u_i \cdot i_j$.&lt;/p&gt;

&lt;p&gt;Factorization Machines takes inspiration from matrix factorization, and models the feature iteractions like using latent vectors of size $K$. As a result, every sparse feature $f_i$ has a corresponding latent vector $v_i$. And two feature&amp;rsquo;s interactions are modelled as $v_i \cdot v_j$.&lt;/p&gt;

&lt;!-- 
$$y = w_0 + \sum\_{i = 1}^n w\_i x\_i + \sum\_{i = 1}^n \sum\_{j = 1}^n \langle v\_i, v\_j \rangle$$ --&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://uyenhoang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uyenhoang.github.io/about/</guid>
      <description>&lt;p&gt;My name is Uyen. I am a data scientist at Vox Pop Labs.&lt;/p&gt;

&lt;p&gt;My contact info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uyen [@] voxpoplabs.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uyenhoang&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>